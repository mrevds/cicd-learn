<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/.dockerignore">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.dockerignore" />
              <option name="updatedContent" value=".git&#10;.github&#10;.idea&#10;*.md&#10;.dockerignore&#10;Dockerfile" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/.github/workflows/deploy.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.github/workflows/deploy.yml" />
              <option name="originalContent" value="name: CI/CD Pipeline&#10;&#10;on:&#10;  push:&#10;    branches: [ &quot;main&quot; ]&#10;  pull_request:&#10;    branches: [ &quot;main&quot; ]&#10;&#10;jobs:&#10;  test:&#10;    runs-on: ubuntu-latest&#10;    steps:&#10;      - name: Checkout code&#10;        uses: actions/checkout@v4&#10;&#10;      - name: Set up Go&#10;        uses: actions/setup-go@v4&#10;        with:&#10;          go-version: '1.20'&#10;&#10;      - name: Run tests&#10;        run: go test -v ./...&#10;&#10;  build-and-deploy:&#10;    needs: test&#10;    runs-on: ubuntu-latest&#10;    if: github.ref == 'refs/heads/main' &amp;&amp; github.event_name == 'push'&#10;&#10;    steps:&#10;      - name: Checkout code&#10;        uses: actions/checkout@v4&#10;&#10;      - name: Set up Docker Buildx&#10;        uses: docker/setup-buildx-action@v3&#10;&#10;      - name: Login to DockerHub&#10;        uses: docker/login-action@v3&#10;        with:&#10;          username: ${{ secrets.DOCKERHUB_USERNAME }}&#10;          password: ${{ secrets.DOCKERHUB_TOKEN }}&#10;&#10;      - name: Build and push Docker image&#10;        uses: docker/build-push-action@v5&#10;        with:&#10;          context: .&#10;          push: true&#10;          tags: |&#10;            ${{ secrets.DOCKERHUB_USERNAME }}/my-api:latest&#10;            ${{ secrets.DOCKERHUB_USERNAME }}/my-api:${{ github.sha }}&#10;          cache-from: type=gha&#10;          cache-to: type=gha,mode=max&#10;&#10;      - name: Deploy to server&#10;        uses: appleboy/ssh-action@v1.0.3&#10;        with:&#10;          host: ${{ secrets.SERVER_IP }}&#10;          username: ${{ secrets.SERVER_USER }}&#10;          key: ${{ secrets.SERVER_SSH_KEY }}&#10;          script: |&#10;            # Останавливаем и удаляем старый контейнер&#10;            docker stop my-api || true&#10;            docker rm my-api || true&#10;            &#10;            # Очищаем старые образы&#10;            docker image prune -f&#10;            &#10;            # Загружаем новый образ&#10;            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/my-api:latest&#10;            &#10;            # Запускаем новый контейнер&#10;            docker run -d \&#10;              --name my-api \&#10;              --restart unless-stopped \&#10;              -p 8080:8080 \&#10;              ${{ secrets.DOCKERHUB_USERNAME }}/my-api:latest&#10;            &#10;            # Проверяем что контейнер запустился&#10;            sleep 5&#10;            docker ps | grep my-api&#10;" />
              <option name="updatedContent" value="name: CI/CD Pipeline&#10;&#10;on:&#10;  push:&#10;    branches: [ &quot;main&quot; ]&#10;  pull_request:&#10;    branches: [ &quot;main&quot; ]&#10;&#10;jobs:&#10;  test:&#10;    runs-on: ubuntu-latest&#10;    steps:&#10;      - name: Checkout code&#10;        uses: actions/checkout@v4&#10;&#10;      - name: Set up Go&#10;        uses: actions/setup-go@v4&#10;        with:&#10;          go-version: '1.20'&#10;&#10;      - name: Run tests&#10;        run: go test -v ./...&#10;&#10;  build-and-deploy:&#10;    needs: test&#10;    runs-on: ubuntu-latest&#10;    if: github.ref == 'refs/heads/main' &amp;&amp; github.event_name == 'push'&#10;&#10;    steps:&#10;      - name: Checkout code&#10;        uses: actions/checkout@v4&#10;&#10;      - name: Set up Docker Buildx&#10;        uses: docker/setup-buildx-action@v3&#10;&#10;      - name: Login to DockerHub&#10;        uses: docker/login-action@v3&#10;        with:&#10;          username: ${{ secrets.DOCKERHUB_USERNAME }}&#10;          password: ${{ secrets.DOCKERHUB_TOKEN }}&#10;&#10;      - name: Build and push Docker image&#10;        uses: docker/build-push-action@v5&#10;        with:&#10;          context: .&#10;          push: true&#10;          tags: |&#10;            ${{ secrets.DOCKERHUB_USERNAME }}/learncicd:latest&#10;            ${{ secrets.DOCKERHUB_USERNAME }}/learncicd:${{ github.sha }}&#10;          cache-from: type=gha&#10;          cache-to: type=gha,mode=max&#10;&#10;      - name: Deploy to server&#10;        uses: appleboy/ssh-action@v1.0.3&#10;        with:&#10;          host: ${{ secrets.SERVER_IP }}&#10;          username: ${{ secrets.SERVER_USER }}&#10;          key: ${{ secrets.SERVER_SSH_KEY }}&#10;          script: |&#10;            # Останавливаем и удаляем старый контейнер&#10;            docker stop learncicd || true&#10;            docker rm learncicd || true&#10;            &#10;            # Очищаем старые образы&#10;            docker image prune -f&#10;            &#10;            # Загружаем новый образ&#10;            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/learncicd:latest&#10;            &#10;            # Запускаем новый контейнер&#10;            docker run -d \&#10;              --name learncicd \&#10;              --restart unless-stopped \&#10;              -p 8080:8080 \&#10;              ${{ secrets.DOCKERHUB_USERNAME }}/learncicd:latest&#10;            &#10;            # Проверяем что контейнер запустился&#10;            sleep 5&#10;            docker ps | grep learncicd" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Dockerfile">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Dockerfile" />
              <option name="originalContent" value="FROM golang:1.20 AS builder&#10;WORKDIR /app&#10;COPY . .&#10;RUN go build -o app&#10;&#10;FROM alpine:latest&#10;WORKDIR /app&#10;COPY --from=builder /app/app .&#10;EXPOSE 8080&#10;CMD [&quot;./app&quot;]" />
              <option name="updatedContent" value="FROM golang:1.20-alpine AS builder&#10;&#10;# Устанавливаем git и другие зависимости&#10;RUN apk add --no-cache git&#10;&#10;WORKDIR /app&#10;COPY go.mod go.sum ./&#10;RUN go mod download&#10;&#10;COPY . .&#10;&#10;# Запускаем тесты&#10;RUN go test -v ./...&#10;&#10;# Собираем статически (важно для Alpine)&#10;RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app .&#10;&#10;# Финальный образ&#10;FROM alpine:latest&#10;&#10;# Добавляем сертификаты и timezone данные&#10;RUN apk --no-cache add ca-certificates tzdata&#10;WORKDIR /root/&#10;&#10;# Копируем собранное приложение&#10;COPY --from=builder /app/app .&#10;&#10;EXPOSE 8080&#10;&#10;CMD [&quot;./app&quot;]" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/go.mod">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/go.mod" />
              <option name="originalContent" value="module cicd&#10;&#10;go 1.24.6&#10;&#10;require github.com/gin-gonic/gin v1.10.1&#10;&#10;require (&#10;&#9;github.com/bytedance/sonic v1.11.6 // indirect&#10;&#9;github.com/bytedance/sonic/loader v0.1.1 // indirect&#10;&#9;github.com/cloudwego/base64x v0.1.4 // indirect&#10;&#9;github.com/cloudwego/iasm v0.2.0 // indirect&#10;&#9;github.com/gabriel-vasile/mimetype v1.4.3 // indirect&#10;&#9;github.com/gin-contrib/sse v0.1.0 // indirect&#10;&#9;github.com/go-playground/locales v0.14.1 // indirect&#10;&#9;github.com/go-playground/universal-translator v0.18.1 // indirect&#10;&#9;github.com/go-playground/validator/v10 v10.20.0 // indirect&#10;&#9;github.com/goccy/go-json v0.10.2 // indirect&#10;&#9;github.com/json-iterator/go v1.1.12 // indirect&#10;&#9;github.com/klauspost/cpuid/v2 v2.2.7 // indirect&#10;&#9;github.com/leodido/go-urn v1.4.0 // indirect&#10;&#9;github.com/mattn/go-isatty v0.0.20 // indirect&#10;&#9;github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect&#10;&#9;github.com/modern-go/reflect2 v1.0.2 // indirect&#10;&#9;github.com/pelletier/go-toml/v2 v2.2.2 // indirect&#10;&#9;github.com/twitchyliquid64/golang-asm v0.15.1 // indirect&#10;&#9;github.com/ugorji/go/codec v1.2.12 // indirect&#10;&#9;golang.org/x/arch v0.8.0 // indirect&#10;&#9;golang.org/x/crypto v0.23.0 // indirect&#10;&#9;golang.org/x/net v0.25.0 // indirect&#10;&#9;golang.org/x/sys v0.20.0 // indirect&#10;&#9;golang.org/x/text v0.15.0 // indirect&#10;&#9;google.golang.org/protobuf v1.34.1 // indirect&#10;&#9;gopkg.in/yaml.v3 v3.0.1 // indirect&#10;)&#10;" />
              <option name="updatedContent" value="module cicd&#10;&#10;go 1.20&#10;&#10;require github.com/gin-gonic/gin v1.10.1&#10;&#10;require (&#10;&#9;github.com/bytedance/sonic v1.11.6 // indirect&#10;&#9;github.com/bytedance/sonic/loader v0.1.1 // indirect&#10;&#9;github.com/cloudwego/base64x v0.1.4 // indirect&#10;&#9;github.com/cloudwego/iasm v0.2.0 // indirect&#10;&#9;github.com/gabriel-vasile/mimetype v1.4.3 // indirect&#10;&#9;github.com/gin-contrib/sse v0.1.0 // indirect&#10;&#9;github.com/go-playground/locales v0.14.1 // indirect&#10;&#9;github.com/go-playground/universal-translator v0.18.1 // indirect&#10;&#9;github.com/go-playground/validator/v10 v10.20.0 // indirect&#10;&#9;github.com/goccy/go-json v0.10.2 // indirect&#10;&#9;github.com/json-iterator/go v1.1.12 // indirect&#10;&#9;github.com/klauspost/cpuid/v2 v2.2.7 // indirect&#10;&#9;github.com/leodido/go-urn v1.4.0 // indirect&#10;&#9;github.com/mattn/go-isatty v0.0.20 // indirect&#10;&#9;github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect&#10;&#9;github.com/modern-go/reflect2 v1.0.2 // indirect&#10;&#9;github.com/pelletier/go-toml/v2 v2.2.2 // indirect&#10;&#9;github.com/twitchyliquid64/golang-asm v0.15.1 // indirect&#10;&#9;github.com/ugorji/go/codec v1.2.12 // indirect&#10;&#9;golang.org/x/arch v0.8.0 // indirect&#10;&#9;golang.org/x/crypto v0.23.0 // indirect&#10;&#9;golang.org/x/net v0.25.0 // indirect&#10;&#9;golang.org/x/sys v0.20.0 // indirect&#10;&#9;golang.org/x/text v0.15.0 // indirect&#10;&#9;google.golang.org/protobuf v1.34.1 // indirect&#10;&#9;gopkg.in/yaml.v3 v3.0.1 // indirect&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>